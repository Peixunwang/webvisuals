import unittest
from src.mesh_generators import gen_block_mesh
from src.mesh import Mesh


class TestMesh(unittest.TestCase):
    
    def test_gen_block_mesh_2d(self):
        mesh_2d = Mesh([[0.0, 0.0], [0.5, 0.0], [1.0, 0.0],
                        [0.0, 0.5], [0.5, 0.5], [1.0, 0.5],
                        [0.0, 1.0], [0.5, 1.0], [1.0, 1.0],
                        [0.0, 1.5], [0.5, 1.5], [1.0, 1.5],
                        [0.0, 2.0], [0.5, 2.0], [1.0, 2.0]],
                       [[0, 1, 4, 3],
                        [1, 2, 5, 4], 
                        [3, 4, 7, 6],
                        [4, 5, 8, 7], 
                        [6, 7, 10, 9],
                        [7, 8, 11, 10],
                        [9, 10, 13, 12],
                        [10, 11, 14, 13]],
                        'quad',
                        [[0, 1], [1, 2], 
                         [2, 5], [5, 8], [8, 11], [11, 14], 
                         [14, 13], [13, 12], 
                         [12, 9], [9, 6], [6, 3], [3, 0]])

        mesh_3d = Mesh([[0. ,  0. ,  0.  ],
                        [0.5,  0. ,  0.  ],
                        [1. ,  0. ,  0.  ],
                        [0. ,  0.5,  0.  ],
                        [0.5,  0.5,  0.  ],
                        [1. ,  0.5,  0.  ],
                        [0. ,  1. ,  0.  ],
                        [0.5,  1. ,  0.  ],
                        [1. ,  1. ,  0.  ],
                        [0. ,  1.5,  0.  ],
                        [0.5,  1.5,  0.  ],
                        [1. ,  1.5,  0.  ],
                        [0. ,  2. ,  0.  ],
                        [0.5,  2. ,  0.  ],
                        [1. ,  2. ,  0.  ],
                        [0. ,  0. ,  0.25],
                        [0.5,  0. ,  0.25],
                        [1. ,  0. ,  0.25],
                        [0. ,  0.5,  0.25],
                        [0.5,  0.5,  0.25],
                        [1. ,  0.5,  0.25],
                        [0. ,  1. ,  0.25],
                        [0.5,  1. ,  0.25],
                        [1. ,  1. ,  0.25],
                        [0. ,  1.5,  0.25],
                        [0.5,  1.5,  0.25],
                        [1. ,  1.5,  0.25],
                        [0. ,  2. ,  0.25],
                        [0.5,  2. ,  0.25],
                        [1. ,  2. ,  0.25],
                        [0. ,  0. ,  0.5 ],
                        [0.5,  0. ,  0.5 ],
                        [1. ,  0. ,  0.5 ],
                        [0. ,  0.5,  0.5 ],
                        [0.5,  0.5,  0.5 ],
                        [1. ,  0.5,  0.5 ],
                        [0. ,  1. ,  0.5 ],
                        [0.5,  1. ,  0.5 ],
                        [1. ,  1. ,  0.5 ],
                        [0. ,  1.5,  0.5 ],
                        [0.5,  1.5,  0.5 ],
                        [1. ,  1.5,  0.5 ],
                        [0. ,  2. ,  0.5 ],
                        [0.5,  2. ,  0.5 ],
                        [1. ,  2. ,  0.5 ]],
                        [[0,  1,  4,  3, 15, 16, 19, 18],
                        [ 1,  2,  5,  4, 16, 17, 20, 19],
                        [ 3,  4,  7,  6, 18, 19, 22, 21],
                        [ 4,  5,  8,  7, 19, 20, 23, 22],
                        [ 6,  7, 10,  9, 21, 22, 25, 24],
                        [ 7,  8, 11, 10, 22, 23, 26, 25],
                        [ 9, 10, 13, 12, 24, 25, 28, 27],
                        [10, 11, 14, 13, 25, 26, 29, 28],
                        [15, 16, 19, 18, 30, 31, 34, 33],
                        [16, 17, 20, 19, 31, 32, 35, 34],
                        [18, 19, 22, 21, 33, 34, 37, 36],
                        [19, 20, 23, 22, 34, 35, 38, 37],
                        [21, 22, 25, 24, 36, 37, 40, 39],
                        [22, 23, 26, 25, 37, 38, 41, 40],
                        [24, 25, 28, 27, 39, 40, 43, 42],
                        [25, 26, 29, 28, 40, 41, 44, 43]],
                        'hexahedron',
                        )
        test_mesh_2d = gen_block_mesh([(0, 1), (0, 2)], (3, 5))
        test_mesh_3d = gen_block_mesh([[0, 1], [0, 2], [0, 0.5]], (3, 5, 3))
        self.assertEqual(mesh_2d, test_mesh_2d)
        # self.assertEqual(mesh_3d, test_mesh_3d)

    def test_gen_block_mesh_3d(self):
        test_mesh_3d = gen_block_mesh([[0, 1], [0, 2], [0, 0.5]], (3, 5, 3))
        mesh_3d = Mesh([[0. ,  0. ,  0.  ],
                        [0.5,  0. ,  0.  ],
                        [1. ,  0. ,  0.  ],
                        [0. ,  0.5,  0.  ],
                        [0.5,  0.5,  0.  ],
                        [1. ,  0.5,  0.  ],
                        [0. ,  1. ,  0.  ],
                        [0.5,  1. ,  0.  ],
                        [1. ,  1. ,  0.  ],
                        [0. ,  1.5,  0.  ],
                        [0.5,  1.5,  0.  ],
                        [1. ,  1.5,  0.  ],
                        [0. ,  2. ,  0.  ],
                        [0.5,  2. ,  0.  ],
                        [1. ,  2. ,  0.  ],
                        [0. ,  0. ,  0.25],
                        [0.5,  0. ,  0.25],
                        [1. ,  0. ,  0.25],
                        [0. ,  0.5,  0.25],
                        [0.5,  0.5,  0.25],
                        [1. ,  0.5,  0.25],
                        [0. ,  1. ,  0.25],
                        [0.5,  1. ,  0.25],
                        [1. ,  1. ,  0.25],
                        [0. ,  1.5,  0.25],
                        [0.5,  1.5,  0.25],
                        [1. ,  1.5,  0.25],
                        [0. ,  2. ,  0.25],
                        [0.5,  2. ,  0.25],
                        [1. ,  2. ,  0.25],
                        [0. ,  0. ,  0.5 ],
                        [0.5,  0. ,  0.5 ],
                        [1. ,  0. ,  0.5 ],
                        [0. ,  0.5,  0.5 ],
                        [0.5,  0.5,  0.5 ],
                        [1. ,  0.5,  0.5 ],
                        [0. ,  1. ,  0.5 ],
                        [0.5,  1. ,  0.5 ],
                        [1. ,  1. ,  0.5 ],
                        [0. ,  1.5,  0.5 ],
                        [0.5,  1.5,  0.5 ],
                        [1. ,  1.5,  0.5 ],
                        [0. ,  2. ,  0.5 ],
                        [0.5,  2. ,  0.5 ],
                        [1. ,  2. ,  0.5 ]],
                        [[0,  1,  4,  3, 15, 16, 19, 18],
                        [ 1,  2,  5,  4, 16, 17, 20, 19],
                        [ 3,  4,  7,  6, 18, 19, 22, 21],
                        [ 4,  5,  8,  7, 19, 20, 23, 22],
                        [ 6,  7, 10,  9, 21, 22, 25, 24],
                        [ 7,  8, 11, 10, 22, 23, 26, 25],
                        [ 9, 10, 13, 12, 24, 25, 28, 27],
                        [10, 11, 14, 13, 25, 26, 29, 28],
                        [15, 16, 19, 18, 30, 31, 34, 33],
                        [16, 17, 20, 19, 31, 32, 35, 34],
                        [18, 19, 22, 21, 33, 34, 37, 36],
                        [19, 20, 23, 22, 34, 35, 38, 37],
                        [21, 22, 25, 24, 36, 37, 40, 39],
                        [22, 23, 26, 25, 37, 38, 41, 40],
                        [24, 25, 28, 27, 39, 40, 43, 42],
                        [25, 26, 29, 28, 40, 41, 44, 43]],
                        'hexahedron', test_mesh_3d.facet
                        )
        self.assertEqual(mesh_3d, test_mesh_3d, 'Skipping facet test')

if __name__ == '__main__':
    unittest.main()